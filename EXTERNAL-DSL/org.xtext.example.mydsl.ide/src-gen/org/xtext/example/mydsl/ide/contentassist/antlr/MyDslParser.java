/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getActionElementAccess().getAlternatives(), "rule__ActionElement__Alternatives");
			builder.put(grammarAccess.getConstraintClassesAccess().getAlternatives(), "rule__ConstraintClasses__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getSystemRootAccess().getGroup(), "rule__SystemRoot__Group__0");
			builder.put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_10(), "rule__Mission__Group_10__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_12(), "rule__Mission__Group_12__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_12_3(), "rule__Mission__Group_12_3__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_12_3_1(), "rule__Mission__Group_12_3_1__0");
			builder.put(grammarAccess.getDroneGroupAccess().getGroup(), "rule__DroneGroup__Group__0");
			builder.put(grammarAccess.getDroneGroupAccess().getGroup_7(), "rule__DroneGroup__Group_7__0");
			builder.put(grammarAccess.getDroneAccess().getGroup(), "rule__Drone__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getPermissionConstraintAccess().getGroup(), "rule__PermissionConstraint__Group__0");
			builder.put(grammarAccess.getRegulatoryConstraintAccess().getGroup(), "rule__RegulatoryConstraint__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
			builder.put(grammarAccess.getModelAccess().getSystemRootAssignment_0(), "rule__Model__SystemRootAssignment_0");
			builder.put(grammarAccess.getModelAccess().getEntitiesAssignment_1(), "rule__Model__EntitiesAssignment_1");
			builder.put(grammarAccess.getModelAccess().getRelationsAssignment_2(), "rule__Model__RelationsAssignment_2");
			builder.put(grammarAccess.getSystemRootAccess().getNameAssignment_1(), "rule__SystemRoot__NameAssignment_1");
			builder.put(grammarAccess.getSystemRootAccess().getEntitiesAssignment_2(), "rule__SystemRoot__EntitiesAssignment_2");
			builder.put(grammarAccess.getSystemRootAccess().getRelationsAssignment_3(), "rule__SystemRoot__RelationsAssignment_3");
			builder.put(grammarAccess.getMissionAccess().getNameAssignment_1(), "rule__Mission__NameAssignment_1");
			builder.put(grammarAccess.getMissionAccess().getDroneGroupAssignment_5(), "rule__Mission__DroneGroupAssignment_5");
			builder.put(grammarAccess.getMissionAccess().getActionsAssignment_9(), "rule__Mission__ActionsAssignment_9");
			builder.put(grammarAccess.getMissionAccess().getActionsAssignment_10_1(), "rule__Mission__ActionsAssignment_10_1");
			builder.put(grammarAccess.getMissionAccess().getConstraintsAssignment_12_3_0(), "rule__Mission__ConstraintsAssignment_12_3_0");
			builder.put(grammarAccess.getMissionAccess().getConstraintsAssignment_12_3_1_1(), "rule__Mission__ConstraintsAssignment_12_3_1_1");
			builder.put(grammarAccess.getDroneGroupAccess().getNameAssignment_1(), "rule__DroneGroup__NameAssignment_1");
			builder.put(grammarAccess.getDroneGroupAccess().getDronesAssignment_6(), "rule__DroneGroup__DronesAssignment_6");
			builder.put(grammarAccess.getDroneGroupAccess().getDronesAssignment_7_1(), "rule__DroneGroup__DronesAssignment_7_1");
			builder.put(grammarAccess.getDroneAccess().getNameAssignment_1(), "rule__Drone__NameAssignment_1");
			builder.put(grammarAccess.getDroneAccess().getIpAssignment_5(), "rule__Drone__IpAssignment_5");
			builder.put(grammarAccess.getDroneAccess().getSerialNumberAssignment_8(), "rule__Drone__SerialNumberAssignment_8");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
			builder.put(grammarAccess.getActionAccess().getDescriptionAssignment_5(), "rule__Action__DescriptionAssignment_5");
			builder.put(grammarAccess.getActionAccess().getTypeAssignment_8(), "rule__Action__TypeAssignment_8");
			builder.put(grammarAccess.getConstraintAccess().getNameAssignment_1(), "rule__Constraint__NameAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getDescriptionAssignment_5(), "rule__Constraint__DescriptionAssignment_5");
			builder.put(grammarAccess.getPermissionConstraintAccess().getNameAssignment_1(), "rule__PermissionConstraint__NameAssignment_1");
			builder.put(grammarAccess.getPermissionConstraintAccess().getDescriptionAssignment_5(), "rule__PermissionConstraint__DescriptionAssignment_5");
			builder.put(grammarAccess.getRegulatoryConstraintAccess().getNameAssignment_1(), "rule__RegulatoryConstraint__NameAssignment_1");
			builder.put(grammarAccess.getRegulatoryConstraintAccess().getDescriptionAssignment_5(), "rule__RegulatoryConstraint__DescriptionAssignment_5");
			builder.put(grammarAccess.getRelationAccess().getNameAssignment_1(), "rule__Relation__NameAssignment_1");
			builder.put(grammarAccess.getRelationAccess().getFromAssignment_5(), "rule__Relation__FromAssignment_5");
			builder.put(grammarAccess.getRelationAccess().getToAssignment_8(), "rule__Relation__ToAssignment_8");
			builder.put(grammarAccess.getRelationAccess().getTypeAssignment_11(), "rule__Relation__TypeAssignment_11");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
