/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.ActionElement;
import org.xtext.example.mydsl.myDsl.ActionExpression;
import org.xtext.example.mydsl.myDsl.Constraint;
import org.xtext.example.mydsl.myDsl.ConstraintClasses;
import org.xtext.example.mydsl.myDsl.Drone;
import org.xtext.example.mydsl.myDsl.DroneGroup;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.Mission;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.myDsl.OrExpression;
import org.xtext.example.mydsl.myDsl.PermissionConstraint;
import org.xtext.example.mydsl.myDsl.PrimaryExpression;
import org.xtext.example.mydsl.myDsl.RegulatoryConstraint;
import org.xtext.example.mydsl.myDsl.Relation;
import org.xtext.example.mydsl.myDsl.ThenExpression;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  public static class AttributeInfo {
    private String name;

    private String type;

    public AttributeInfo(final String name, final String type) {
      this.name = name;
      this.type = type;
    }

    public String javaType() {
      final String type = this.type;
      if (type != null) {
        switch (type) {
          case "STRING":
            return "String";
          case "INT":
            return "int";
          case "FLOAT":
            return "float";
          case "BOOLEAN":
            return "boolean";
          default:
            return this.type;
        }
      } else {
        return this.type;
      }
    }
  }

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Model root = ((Model[])Conversions.unwrapArray((Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class)), Model.class))[0];
    final Function1<Entity, String> _function = (Entity e) -> {
      return e.eClass().getName();
    };
    final Set<String> types = IterableExtensions.<String>toSet(ListExtensions.<Entity, String>map(root.getEntities(), _function));
    for (final String typeName : types) {
      String _name = root.getName();
      String _plus = (_name + "/");
      String _plus_1 = (_plus + typeName);
      String _plus_2 = (_plus_1 + ".java");
      fsa.generateFile(_plus_2, this.generateClassForType(typeName, root));
    }
    fsa.generateFile("/SystemInitializer.java", this.generateSystemInitializer(root));
  }

  public CharSequence generateClassForType(final String typeName, final Model root) {
    CharSequence _xblockexpression = null;
    {
      final List<MyDslGenerator.AttributeInfo> attributes = this.getEntityAttributes(typeName);
      final String parentClass = this.findParentEntity(typeName, root);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      String _name = root.getName();
      _builder.append(_name);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("import java.util.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(typeName);
      _builder.append(" ");
      {
        if ((parentClass != null)) {
          _builder.append("extends ");
          _builder.append(parentClass);
        }
      }
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      {
        for(final MyDslGenerator.AttributeInfo attr : attributes) {
          _builder.append("    ");
          _builder.append("private ");
          String _javaType = attr.javaType();
          _builder.append(_javaType, "    ");
          _builder.append(" ");
          _builder.append(attr.name, "    ");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// Constructor");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("public ");
      _builder.append(typeName, "        ");
      _builder.append("(");
      final Function1<MyDslGenerator.AttributeInfo, String> _function = (MyDslGenerator.AttributeInfo a) -> {
        String _javaType_1 = a.javaType();
        String _plus = (_javaType_1 + " ");
        return (_plus + a.name);
      };
      String _join = IterableExtensions.join(ListExtensions.<MyDslGenerator.AttributeInfo, String>map(attributes, _function), ", ");
      _builder.append(_join, "        ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      {
        if ((parentClass != null)) {
          _builder.append("super(");
          {
            List<MyDslGenerator.AttributeInfo> _entityAttributes = this.getEntityAttributes(parentClass);
            boolean _hasElements = false;
            for(final MyDslGenerator.AttributeInfo attr_1 : _entityAttributes) {
              if (!_hasElements) {
                _hasElements = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              _builder.append(attr_1.name);
            }
          }
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        for(final MyDslGenerator.AttributeInfo attr_2 : attributes) {
          _builder.append("            ");
          _builder.append("this.");
          _builder.append(attr_2.name, "            ");
          _builder.append(" = ");
          _builder.append(attr_2.name, "            ");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t        \t");
      _builder.append("}");
      _builder.newLine();
      {
        for(final MyDslGenerator.AttributeInfo attr_3 : attributes) {
          _builder.append("public void set");
          String _firstUpper = StringExtensions.toFirstUpper(attr_3.name);
          _builder.append(_firstUpper);
          _builder.append("(");
          String _javaType_1 = attr_3.javaType();
          _builder.append(_javaType_1);
          _builder.append(" ");
          _builder.append(attr_3.name);
          _builder.append(") {");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          _builder.append("this.");
          _builder.append(attr_3.name, "    ");
          _builder.append(" = ");
          _builder.append(attr_3.name, "    ");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("public ");
          String _javaType_2 = attr_3.javaType();
          _builder.append(_javaType_2);
          _builder.append(" get");
          String _firstUpper_1 = StringExtensions.toFirstUpper(attr_3.name);
          _builder.append(_firstUpper_1);
          _builder.append("() {");
          _builder.newLineIfNotEmpty();
          _builder.append("    ");
          _builder.append("return this.");
          _builder.append(attr_3.name, "    ");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  public String findParentEntity(final String typeName, final Model root) {
    EList<Relation> _relations = root.getRelations();
    for (final Relation relation : _relations) {
      if ((Objects.equals(relation.getType(), "inherits") && Objects.equals(relation.getFrom().eClass().getName(), typeName))) {
        return relation.getTo().eClass().getName();
      }
    }
    return null;
  }

  public CharSequence generateSystemInitializer(final Model root) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import MedicalSystems.Drone;");
    _builder.newLine();
    _builder.append("import MedicalSystems.DroneGroup;");
    _builder.newLine();
    _builder.append("import MedicalSystems.Action;");
    _builder.newLine();
    _builder.append("import MedicalSystems.Constraint;");
    _builder.newLine();
    _builder.append("import MedicalSystems.PermissionConstraint;");
    _builder.newLine();
    _builder.append("import MedicalSystems.RegulatoryConstraint;");
    _builder.newLine();
    _builder.append("import MedicalSystems.Mission;\t");
    _builder.newLine();
    _builder.append("public class SystemInitializer {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SystemInitializer(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    {
      EList<Entity> _entities = root.getEntities();
      for(final Entity e : _entities) {
        _builder.append("\t            ");
        CharSequence _generateEntityInstantiation = this.generateEntityInstantiation(e);
        _builder.append(_generateEntityInstantiation, "\t            ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("System.out.println(\"System ");
    String _name = root.getName();
    _builder.append(_name, "\t            ");
    _builder.append(" initialized.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateEntityInstantiation(final Entity e) {
    CharSequence _xblockexpression = null;
    {
      final String typeName = e.eClass().getName();
      final String name = e.getName();
      CharSequence _switchResult = null;
      boolean _matched = false;
      if (e instanceof Mission) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("Mission ");
        _builder.append(name);
        _builder.append(" = new Mission(");
        _builder.newLineIfNotEmpty();
        String _name = ((Mission)e).getDroneGroup().getName();
        _builder.append(_name);
        _builder.append(", ");
        _builder.newLineIfNotEmpty();
        _builder.append("Arrays.asList(");
        ActionExpression _actions = ((Mission)e).getActions();
        String _join = IterableExtensions.join(this.extractActionRefs(((EObject) _actions)), ", ");
        _builder.append(_join);
        _builder.append("), ");
        _builder.newLineIfNotEmpty();
        _builder.append("Arrays.asList(");
        final Function1<ConstraintClasses, String> _function = (ConstraintClasses c) -> {
          String _switchResult_1 = null;
          boolean _matched_1 = false;
          if (c instanceof Constraint) {
            _matched_1=true;
            _switchResult_1 = ((Constraint)c).getName();
          }
          if (!_matched_1) {
            if (c instanceof PermissionConstraint) {
              _matched_1=true;
              _switchResult_1 = ((PermissionConstraint)c).getName();
            }
          }
          if (!_matched_1) {
            if (c instanceof RegulatoryConstraint) {
              _matched_1=true;
              _switchResult_1 = ((RegulatoryConstraint)c).getName();
            }
          }
          if (!_matched_1) {
            _switchResult_1 = "// unknown";
          }
          return _switchResult_1;
        };
        String _join_1 = IterableExtensions.join(ListExtensions.<ConstraintClasses, String>map(((Mission)e).getConstraints(), _function), ", ");
        _builder.append(_join_1);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append(");");
        _builder.newLine();
        _switchResult = _builder;
      }
      if (!_matched) {
        if (e instanceof DroneGroup) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("DroneGroup ");
          _builder.append(name);
          _builder.append(" = new DroneGroup(Arrays.asList(");
          final Function1<Drone, String> _function = (Drone d) -> {
            return d.getName();
          };
          String _join = IterableExtensions.join(ListExtensions.<Drone, String>map(((DroneGroup)e).getDrones(), _function), ", ");
          _builder.append(_join);
          _builder.append("));");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (e instanceof Drone) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("Drone ");
          _builder.append(name);
          _builder.append(" = new Drone(\"");
          String _ip = ((Drone)e).getIp();
          _builder.append(_ip);
          _builder.append("\", \"");
          String _serialNumber = ((Drone)e).getSerialNumber();
          _builder.append(_serialNumber);
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (e instanceof Action) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("Action ");
          _builder.append(name);
          _builder.append(" = new Action(\"");
          String _description = ((Action)e).getDescription();
          _builder.append(_description);
          _builder.append("\", \"");
          String _type = ((Action)e).getType();
          _builder.append(_type);
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (e instanceof PermissionConstraint) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("Constraint ");
          _builder.append(name);
          _builder.append(" = new PermissionConstraint(\"");
          String _description = ((PermissionConstraint)e).getDescription();
          _builder.append(_description);
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (e instanceof RegulatoryConstraint) {
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("Constraint ");
          _builder.append(name);
          _builder.append(" = new RegulatoryConstraint(\"");
          String _description = ((RegulatoryConstraint)e).getDescription();
          _builder.append(_description);
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }

  public List<String> extractActionRefs(final EObject expr) {
    boolean _matched = false;
    if (expr instanceof OrExpression) {
      _matched=true;
      List<String> _extractActionRefs = this.extractActionRefs(((OrExpression) expr).getLeft());
      List<String> _extractActionRefs_1 = this.extractActionRefs(((OrExpression) expr).getRight());
      return IterableExtensions.<String>toList(Iterables.<String>concat(_extractActionRefs, _extractActionRefs_1));
    }
    if (!_matched) {
      if (expr instanceof ThenExpression) {
        _matched=true;
        List<String> _extractActionRefs = this.extractActionRefs(((ThenExpression) expr).getLeft());
        List<String> _extractActionRefs_1 = this.extractActionRefs(((ThenExpression) expr).getRight());
        return IterableExtensions.<String>toList(Iterables.<String>concat(_extractActionRefs, _extractActionRefs_1));
      }
    }
    if (!_matched) {
      if (expr instanceof PrimaryExpression) {
        _matched=true;
        final PrimaryExpression pe = ((PrimaryExpression) expr);
        ActionExpression _expression = pe.getExpression();
        boolean _tripleNotEquals = (_expression != null);
        if (_tripleNotEquals) {
          return this.extractActionRefs(pe.getExpression());
        }
        ActionElement _actionRef = pe.getActionRef();
        if ((_actionRef instanceof Action)) {
          ActionElement _actionRef_1 = pe.getActionRef();
          return CollectionLiterals.<String>newArrayList(((Action) _actionRef_1).getName());
        } else {
          ActionElement _actionRef_2 = pe.getActionRef();
          if ((_actionRef_2 instanceof Mission)) {
            ActionElement _actionRef_3 = pe.getActionRef();
            return CollectionLiterals.<String>newArrayList(((Mission) _actionRef_3).getName());
          }
        }
      }
    }
    if (!_matched) {
      return CollectionLiterals.<String>newArrayList();
    }
    return null;
  }

  public List<MyDslGenerator.AttributeInfo> getEntityAttributes(final String typeName) {
    List<MyDslGenerator.AttributeInfo> _switchResult = null;
    if (typeName != null) {
      switch (typeName) {
        case "Mission":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createMission());
          break;
        case "Drone":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createDrone());
          break;
        case "DroneGroup":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createDroneGroup());
          break;
        case "Action":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createAction());
          break;
        case "PermissionConstraint":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createPermissionConstraint());
          break;
        case "RegulatoryConstraint":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createRegulatoryConstraint());
          break;
        case "Constraint":
          _switchResult = this.getEntityAttributes(MyDslFactory.eINSTANCE.createConstraint());
          break;
        default:
          _switchResult = CollectionLiterals.<MyDslGenerator.AttributeInfo>newArrayList();
          break;
      }
    } else {
      _switchResult = CollectionLiterals.<MyDslGenerator.AttributeInfo>newArrayList();
    }
    return _switchResult;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final Mission mission) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("droneGroup", "DroneGroup");
    result.add(_attributeInfo);
    MyDslGenerator.AttributeInfo _attributeInfo_1 = new MyDslGenerator.AttributeInfo("actions", "List<Object>");
    result.add(_attributeInfo_1);
    MyDslGenerator.AttributeInfo _attributeInfo_2 = new MyDslGenerator.AttributeInfo("constraints", "List<Constraint>");
    result.add(_attributeInfo_2);
    return result;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final Drone drone) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("ip", "STRING");
    result.add(_attributeInfo);
    MyDslGenerator.AttributeInfo _attributeInfo_1 = new MyDslGenerator.AttributeInfo("serialNumber", "STRING");
    result.add(_attributeInfo_1);
    return result;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final DroneGroup droneGroup) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("drones", "List<Drone>");
    result.add(_attributeInfo);
    return result;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final Action action) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("type", "STRING");
    result.add(_attributeInfo);
    MyDslGenerator.AttributeInfo _attributeInfo_1 = new MyDslGenerator.AttributeInfo("description", "STRING");
    result.add(_attributeInfo_1);
    return result;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final Constraint constraint) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("description", "STRING");
    result.add(_attributeInfo);
    return result;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final PermissionConstraint constraint) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("description", "STRING");
    result.add(_attributeInfo);
    return result;
  }

  protected List<MyDslGenerator.AttributeInfo> _getEntityAttributes(final RegulatoryConstraint constraint) {
    final ArrayList<MyDslGenerator.AttributeInfo> result = new ArrayList<MyDslGenerator.AttributeInfo>();
    MyDslGenerator.AttributeInfo _attributeInfo = new MyDslGenerator.AttributeInfo("description", "STRING");
    result.add(_attributeInfo);
    return result;
  }

  @XbaseGenerated
  public List<MyDslGenerator.AttributeInfo> getEntityAttributes(final Entity constraint) {
    if (constraint instanceof Constraint) {
      return _getEntityAttributes((Constraint)constraint);
    } else if (constraint instanceof PermissionConstraint) {
      return _getEntityAttributes((PermissionConstraint)constraint);
    } else if (constraint instanceof RegulatoryConstraint) {
      return _getEntityAttributes((RegulatoryConstraint)constraint);
    } else if (constraint instanceof Action) {
      return _getEntityAttributes((Action)constraint);
    } else if (constraint instanceof Drone) {
      return _getEntityAttributes((Drone)constraint);
    } else if (constraint instanceof DroneGroup) {
      return _getEntityAttributes((DroneGroup)constraint);
    } else if (constraint instanceof Mission) {
      return _getEntityAttributes((Mission)constraint);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(constraint).toString());
    }
  }
}
