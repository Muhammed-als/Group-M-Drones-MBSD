/*
  * generated by Xtext 2.38.0
  */
 package org.xtext.example.mydsl.generator
 
 import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.xtext.generator.AbstractGenerator;
 import org.eclipse.xtext.generator.IFileSystemAccess2;
 import org.eclipse.xtext.generator.IGeneratorContext;
 
 import org.xtext.example.mydsl.myDsl.SystemRoot;
 import org.xtext.example.mydsl.myDsl.Entity;
 import java.util.List
 import java.util.ArrayList
 import org.xtext.example.mydsl.myDsl.Mission
 import org.xtext.example.mydsl.myDsl.Drone
 import org.xtext.example.mydsl.myDsl.Action
 import org.xtext.example.mydsl.myDsl.Constraint
 import org.xtext.example.mydsl.myDsl.RegulatoryConstraint
 import org.xtext.example.mydsl.myDsl.Relation
import org.xtext.example.mydsl.myDsl.PermissionConstraint
import org.xtext.example.mydsl.myDsl.DroneGroup
import java.util.Map

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var root = resource.allContents.toIterable.filter(SystemRoot).get(0);
		
		for (e: root.entities) {
			var parent = findParentEntity(e, root.relations);
			fsa.generateFile(root.name + "/" + e.name + ".java", e.compile(root, parent))
		}
	}
	
	def Entity findParentEntity(Entity entity, List<Relation> relations) {
		for (relation: relations) {
			if (relation.type == "inherits" && relation.from == entity) {
				return relation.to;
			}
		}
		
		return null;
	}
	
	def compile(Entity entity, SystemRoot root, Entity parentClass) {
		val attributes = getEntityAttributes(entity)
	    val values = getAttributeValues(entity)
		'''
		package «root.name»;
		import java.util.*;
		
		public class «entity.name» «IF parentClass !== null»extends «parentClass.name»«ENDIF» {
			
		    «FOR attr : attributes»
		    private «attr.javaType» «attr.name»«IF values.containsKey(attr.name)» = «values.get(attr.name)»«ELSE» = null«ENDIF»;
		    «ENDFOR»
		
		    «FOR attr : attributes»
		    public void set«attr.name.toFirstUpper»(«attr.javaType» «attr.name») {
		        this.«attr.name» = «attr.name»;
		    }

		    public «attr.javaType» get«attr.name.toFirstUpper»() {
		        return this.«attr.name»;
		    }
		    «ENDFOR»
		}
		'''
	}
	
	static class AttributeInfo {
         String name
         String type
         
         new(String name, String type) {
             this.name = name
             this.type = type
         }
         
         def javaType() {
             switch(type) {
                 case "STRING": return "String"
                 case "INT": return "int" 
                 case "FLOAT": return "float"
                 case "BOOLEAN": return "boolean"
                 default: return type
             }
         }
     }
     
     // Dispatch method to get attributes for each entity type
     def dispatch List<AttributeInfo> getEntityAttributes(Mission mission) {
	    val result = new ArrayList<AttributeInfo>()
	    result.add(new AttributeInfo("droneGroup", "Object")) // not List<Object>
	    result.add(new AttributeInfo("actions", "List<Object>")) // still okay if mixed
	    result.add(new AttributeInfo("constraints", "List<Object>")) // be specific
	    return result
	}
     
     def dispatch List<AttributeInfo> getEntityAttributes(Drone drone) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("ip", "STRING"))
         result.add(new AttributeInfo("serialNumber", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(DroneGroup droneGroup) {
     	val result = new ArrayList<AttributeInfo>()
     	result.add(new AttributeInfo("drones", "List<Object>"))
     	return result
     }

     def dispatch List<AttributeInfo> getEntityAttributes(Action action) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("type", "STRING"))
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(Constraint constraint) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(PermissionConstraint constraint) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(RegulatoryConstraint constraint) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
  	// Dispatch method to get values for each entity type
  	def dispatch Map<String, String> getAttributeValues(Drone drone) {
  		val result = newHashMap
  		result.put("ip", "\"" + drone.ip + "\"")
	    result.put("serialNumber", "\"" + drone.serialNumber + "\"")
	    return result	
	}
	def dispatch Map<String, String> getAttributeValues(DroneGroup droneGroup) {
	    val result = newHashMap
	    val droneInstances = droneGroup.drones.map[d | "new " + d.name + "()"].join(", ")
	    result.put("drones", "Arrays.asList(" + droneInstances + ")")
	    return result
	}
	
	def dispatch Map<String, String> getAttributeValues(Mission mission) {
	    val result = newHashMap
		result.put("droneGroup", "new " + (mission.droneGroup as DroneGroup).name + "()")	
		
	    val actionList = mission.actions.map[a |
	        if (a instanceof Action)
	            "new " + (a as Action).name + "()"
	        else if (a instanceof Mission)
	            "new " + (a as Mission).name + "()"
	        else
	            "null"
	    ].join(", ")
	    result.put("actions", "Arrays.asList(" + actionList + ")")
	
	    val constraintList = mission.constraints.map[c |
		    switch c {
		        Constraint: "new " + c.name + "()"
		        PermissionConstraint: "new " + c.name + "()"
		        RegulatoryConstraint: "new " + c.name + "()"
		        default: "null"
		    }
		].join(", ")
	    result.put("constraints", "Arrays.asList(" + constraintList + ")")
	
	    return result
	}
	
	def dispatch Map<String, String> getAttributeValues(Action action) {
	    val result = newHashMap
	    result.put("type", "\"" + action.type + "\"")
	    result.put("description", "\"" + action.description + "\"")
	    return result
	}
	
	def dispatch Map<String, String> getAttributeValues(Constraint constraint) {
	    val result = newHashMap
	    result.put("description", "\"" + constraint.description + "\"")
	    return result
	}
	
	def dispatch Map<String, String> getAttributeValues(PermissionConstraint constraint) {
	    val result = newHashMap
	    result.put("description", "\"" + constraint.description + "\"")
	    return result
	}
	
	def dispatch Map<String, String> getAttributeValues(RegulatoryConstraint constraint) {
	    val result = newHashMap
	    result.put("description", "\"" + constraint.description + "\"")
	    return result
	}
}
