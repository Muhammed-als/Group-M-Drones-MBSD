/*
  * generated by Xtext 2.38.0
  */
 package org.xtext.example.mydsl.generator
 
 import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.xtext.generator.AbstractGenerator;
 import org.eclipse.xtext.generator.IFileSystemAccess2;
 import org.eclipse.xtext.generator.IGeneratorContext;
 import org.eclipse.emf.common.util.EList
 import org.eclipse.emf.ecore.EObject
 import org.xtext.example.mydsl.myDsl.SystemRoot;
 import org.xtext.example.mydsl.myDsl.Entity;
 import java.util.List
 import java.util.ArrayList
 import org.xtext.example.mydsl.myDsl.Mission
 import org.xtext.example.mydsl.myDsl.Drone
 import org.xtext.example.mydsl.myDsl.Action
 import org.xtext.example.mydsl.myDsl.Constraint
 import org.xtext.example.mydsl.myDsl.RegulatoryConstraint
 import org.xtext.example.mydsl.myDsl.Relation
import org.xtext.example.mydsl.myDsl.PermissionConstraint
import org.xtext.example.mydsl.myDsl.DroneGroup
import java.util.Map
import org.xtext.example.mydsl.myDsl.MyDslFactory

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var root = resource.allContents.toIterable.filter(SystemRoot).get(0);
		val types = root.entities.map[e | e.eClass.name].toSet
		for (typeName : types) {
		    fsa.generateFile(root.name + "/" + typeName + ".java", generateClassForType(typeName, root))
		}
		fsa.generateFile("/SystemInitializer.java", generateSystemInitializer(root))
	}
	def generateClassForType(String typeName, SystemRoot root) {
		val attributes = getEntityAttributes(typeName)
		val parentClass = findParentEntity(typeName, root)
		'''
		package «root.name»;
		import java.util.*;
		
		public class «typeName» «IF parentClass !== null»extends «parentClass»«ENDIF» {
		    «FOR attr : attributes»
		    	private «attr.javaType» «attr.name»;
		    «ENDFOR»
		    
		    // Constructor
		        public «typeName»(«attributes.map[a|a.javaType + " " + a.name].join(", ")») {
		            «IF parentClass !== null»
	 	                super(«FOR attr : getEntityAttributes(parentClass) SEPARATOR ", "»«attr.name»«ENDFOR»);
	 	            «ENDIF»
		            «FOR attr : attributes»
		                this.«attr.name» = «attr.name»;
		            «ENDFOR»
	        	}
			    «FOR attr : attributes»
				    public void set«attr.name.toFirstUpper»(«attr.javaType» «attr.name») {
				        this.«attr.name» = «attr.name»;
				    }
		
				    public «attr.javaType» get«attr.name.toFirstUpper»() {
				        return this.«attr.name»;
				    }
			    «ENDFOR»
			}
		'''
	}
	
	def String findParentEntity(String typeName, SystemRoot root) {
	    for (relation : root.relations) {
	        if (relation.type == "inherits" && relation.from.eClass.name == typeName) {
	            return relation.to.eClass.name
	        }
	    }
	    return null
	}
	
	def generateSystemInitializer(SystemRoot root) {
		'''	
		import java.util.Arrays;
		import MedicalSystems.Drone;
		import MedicalSystems.DroneGroup;
		import MedicalSystems.Action;
		import MedicalSystems.Constraint;
		import MedicalSystems.PermissionConstraint;
		import MedicalSystems.RegulatoryConstraint;
		import MedicalSystems.Mission;	
		public class SystemInitializer {
			public SystemInitializer(){
				
			}
		    public static void main(String[] args) {
		    
	            «FOR e : root.entities»
	                «generateEntityInstantiation(e)»
	            «ENDFOR»
	    
	            System.out.println("System «root.name» initialized.");
	        }
		}
		'''
	}
	def generateEntityInstantiation(Entity e) {
		val typeName = e.eClass.name
		val name = e.name
	
		switch e {
			Mission: '''
	        Mission «name» = new Mission(«e.droneGroup.name», Arrays.asList(«e.actions.map[a|
				switch a {
					Mission: a.name
					Action: a.name
					default: "// unknown"
				}
			].join(", ")»), Arrays.asList(«e.constraints.map[c|c.name].join(", ")»));
			'''
			DroneGroup: '''
	        DroneGroup «name» = new DroneGroup(Arrays.asList(«e.drones.map[d|d.name].join(", ")»));
			'''
			Drone: '''
	        Drone «name» = new Drone("«e.ip»", "«e.serialNumber»");
			'''
			Action: '''
	        Action «name» = new Action("«e.description»", "«e.type»");
			'''
			PermissionConstraint: '''
	        Constraint «name» = new PermissionConstraint("«e.description»");
			'''
			/* 
			Constraint: '''
	        Constraint «name» = new Constraint("«e.name»", "«e.description»");
			'''
			*/
			RegulatoryConstraint: '''
	        Constraint «name» = new RegulatoryConstraint("«e.description»");
			'''
		}
	}
	
	static class AttributeInfo {
         String name
         String type
         
         new(String name, String type) {
             this.name = name
             this.type = type
         }
         
         def javaType() {
             switch(type) {
                 case "STRING": return "String"
                 case "INT": return "int" 
                 case "FLOAT": return "float"
                 case "BOOLEAN": return "boolean"
                 default: return type
             }
         }
     }
     
     // Dispatch method to get attributes for each entity type
     def List<AttributeInfo> getEntityAttributes(String typeName) {
     	// Instead of writing new Mission() we use MyDslFactory.eINSTANCE.createMission()
	    switch typeName {
	        case "Mission": getEntityAttributes(MyDslFactory.eINSTANCE.createMission())
	        case "Drone": getEntityAttributes(MyDslFactory.eINSTANCE.createDrone())
	        case "DroneGroup": getEntityAttributes(MyDslFactory.eINSTANCE.createDroneGroup())
	        case "Action": getEntityAttributes(MyDslFactory.eINSTANCE.createAction())
	        case "PermissionConstraint": getEntityAttributes(MyDslFactory.eINSTANCE.createPermissionConstraint())
	        case "RegulatoryConstraint": getEntityAttributes(MyDslFactory.eINSTANCE.createRegulatoryConstraint())
	        case "Constraint": getEntityAttributes(MyDslFactory.eINSTANCE.createConstraint())
	        default: newArrayList
	    }
	}
     def dispatch List<AttributeInfo> getEntityAttributes(Mission mission) {
	    val result = new ArrayList<AttributeInfo>()
	    result.add(new AttributeInfo("droneGroup", "DroneGroup"))
	    result.add(new AttributeInfo("actions", "List<Object>")) 
	    result.add(new AttributeInfo("constraints", "List<Constraint>"))
	    return result
	}
     
     def dispatch List<AttributeInfo> getEntityAttributes(Drone drone) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("ip", "STRING"))
         result.add(new AttributeInfo("serialNumber", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(DroneGroup droneGroup) {
     	val result = new ArrayList<AttributeInfo>()
     	result.add(new AttributeInfo("drones", "List<Drone>"))
     	return result
     }

     def dispatch List<AttributeInfo> getEntityAttributes(Action action) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("type", "STRING"))
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(Constraint constraint) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(PermissionConstraint constraint) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
     
     def dispatch List<AttributeInfo> getEntityAttributes(RegulatoryConstraint constraint) {
         val result = new ArrayList<AttributeInfo>()
         result.add(new AttributeInfo("description", "STRING"))
         return result
     }
}