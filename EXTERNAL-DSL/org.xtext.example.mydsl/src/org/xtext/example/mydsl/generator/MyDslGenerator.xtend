/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import org.xtext.example.mydsl.myDsl.SystemRoot;
import org.xtext.example.mydsl.myDsl.Entity;
import java.util.List
import java.util.ArrayList
import org.xtext.example.mydsl.myDsl.Mission
import org.xtext.example.mydsl.myDsl.Drone
import org.xtext.example.mydsl.myDsl.EnergyModel
import org.xtext.example.mydsl.myDsl.Phase
import org.xtext.example.mydsl.myDsl.SubPhase
import javax.swing.Action
import org.xtext.example.mydsl.myDsl.SafetyConstraint
import org.xtext.example.mydsl.myDsl.RegulatoryConstraint
import org.xtext.example.mydsl.myDsl.MissionEvent

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        var root = resource.allContents.toIterable.filter(SystemRoot).get(0)
        if (root !== null) {
            for (e : root.entities) {
                fsa.generateFile(root.name + "/" + e.name + ".java", e.compile(root))
            }
        }
    }
    def compile(Entity entity, SystemRoot root){
    	val attributes = getEntityAttributes(entity)
    	'''
			package «root.name»;
			
			public class «entity.name» {
				«FOR attr : attributes»
                    private «attr.javaType» «attr.name»;
                «ENDFOR»
                // Constructor with all attributes
                	// ensures that the parameters are comma-separated
                	// https://eclipse.dev/Xtext/xtend/documentation/203_xtend_expressions.html
                    public «entity.name»(«FOR attr : attributes SEPARATOR ", "»«attr.javaType» «attr.name»«ENDFOR») {
	                    «FOR attr : attributes»
	                    	this.«attr.name» = «attr.name»;
	                    «ENDFOR»
                	}
				«FOR attr : attributes»
	                public void set«attr.name.toFirstUpper»(«attr.javaType» «attr.name») {
	                    this.«attr.name» = «attr.name»;
	                }
	                
	                public «attr.javaType» get«attr.name.toFirstUpper»() {
	                    return this.«attr.name»;
	                }
                «ENDFOR»
			}
		'''
    }
    static class AttributeInfo {
        String name
        String type
        
        new(String name, String type) {
            this.name = name
            this.type = type
        }
        
        def javaType() {
            switch(type) {
                case "STRING": return "String"
                case "INT": return "int" 
                case "FLOAT": return "float"
                case "BOOLEAN": return "boolean"
                case "LIST": return "List"
                default: return "String"
            }
        }
    }
    
    // Dispatch method to get attributes for each entity type
    def dispatch List<AttributeInfo> getEntityAttributes(Mission mission) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("missionID", "STRING"))
        result.add(new AttributeInfo("missionType", "STRING"))
        result.add(new AttributeInfo("startLocation", "STRING"))
        result.add(new AttributeInfo("endLocation", "STRING"))
        result.add(new AttributeInfo("priority", "INT"))
        result.add(new AttributeInfo("estimatedTime", "FLOAT"))
        result.add(new AttributeInfo("drones", "LIST"))
        result.add(new AttributeInfo("phases", "LIST"))
        result.add(new AttributeInfo("constraints", "LIST"))
        result.add(new AttributeInfo("events", "LIST"))
        
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(Drone drone) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("type", "STRING"))
        result.add(new AttributeInfo("batterCapacity", "FLOAT"))
        result.add(new AttributeInfo("maxFlightTime", "FLOAT"))
        result.add(new AttributeInfo("payloadCapacity", "FLOAT"))
        result.add(new AttributeInfo("role", "STRING"))
        result.add(new AttributeInfo("energyModels", "LIST"))
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(EnergyModel model) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("consumptionRate", "FLOAT"))
        result.add(new AttributeInfo("batteryHealth", "FLOAT"))
        result.add(new AttributeInfo("rechargeTime", "FLOAT"))
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(Phase phase) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("phaseType", "STRING"))
        result.add(new AttributeInfo("energyUsage", "FLOAT"))
        result.add(new AttributeInfo("subPhases", "LIST")) 
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(SubPhase subPhase) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("subPhaseType", "STRING"))
        result.add(new AttributeInfo("duration", "FLOAT"))
        result.add(new AttributeInfo("actions", "LIST"))
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(Action action) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("actionType", "STRING"))
        result.add(new AttributeInfo("inputOutput", "STRING"))
        result.add(new AttributeInfo("energyUsage", "FLOAT"))
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(SafetyConstraint constraint) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("minBattery", "FLOAT"))
        result.add(new AttributeInfo("maxWindSpeed", "FLOAT"))
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(RegulatoryConstraint constraint) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("flightPermission", "BOOLEAN"))
        result.add(new AttributeInfo("altitudeLimit", "INT"))
        return result
    }
    
    def dispatch List<AttributeInfo> getEntityAttributes(MissionEvent event) {
        val result = new ArrayList<AttributeInfo>()
        result.add(new AttributeInfo("eventType", "STRING"))
        result.add(new AttributeInfo("impactLevel", "INT"))
        result.add(new AttributeInfo("responseAction", "STRING"))
        return result
    }
}
