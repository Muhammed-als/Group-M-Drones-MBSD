/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.ActionElement;
import org.xtext.example.mydsl.myDsl.ConstraintClasses;
import org.xtext.example.mydsl.myDsl.DroneGroup;
import org.xtext.example.mydsl.myDsl.Mission;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mission</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MissionImpl#getDroneGroup <em>Drone Group</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MissionImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MissionImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MissionImpl extends EntityImpl implements Mission
{
  /**
   * The cached value of the '{@link #getDroneGroup() <em>Drone Group</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDroneGroup()
   * @generated
   * @ordered
   */
  protected DroneGroup droneGroup;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<ActionElement> actions;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<ConstraintClasses> constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MissionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MISSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DroneGroup getDroneGroup()
  {
    if (droneGroup != null && droneGroup.eIsProxy())
    {
      InternalEObject oldDroneGroup = (InternalEObject)droneGroup;
      droneGroup = (DroneGroup)eResolveProxy(oldDroneGroup);
      if (droneGroup != oldDroneGroup)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.MISSION__DRONE_GROUP, oldDroneGroup, droneGroup));
      }
    }
    return droneGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DroneGroup basicGetDroneGroup()
  {
    return droneGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDroneGroup(DroneGroup newDroneGroup)
  {
    DroneGroup oldDroneGroup = droneGroup;
    droneGroup = newDroneGroup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MISSION__DRONE_GROUP, oldDroneGroup, droneGroup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionElement> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectResolvingEList<ActionElement>(ActionElement.class, this, MyDslPackage.MISSION__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConstraintClasses> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectResolvingEList<ConstraintClasses>(ConstraintClasses.class, this, MyDslPackage.MISSION__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MISSION__DRONE_GROUP:
        if (resolve) return getDroneGroup();
        return basicGetDroneGroup();
      case MyDslPackage.MISSION__ACTIONS:
        return getActions();
      case MyDslPackage.MISSION__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MISSION__DRONE_GROUP:
        setDroneGroup((DroneGroup)newValue);
        return;
      case MyDslPackage.MISSION__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends ActionElement>)newValue);
        return;
      case MyDslPackage.MISSION__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends ConstraintClasses>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MISSION__DRONE_GROUP:
        setDroneGroup((DroneGroup)null);
        return;
      case MyDslPackage.MISSION__ACTIONS:
        getActions().clear();
        return;
      case MyDslPackage.MISSION__CONSTRAINTS:
        getConstraints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MISSION__DRONE_GROUP:
        return droneGroup != null;
      case MyDslPackage.MISSION__ACTIONS:
        return actions != null && !actions.isEmpty();
      case MyDslPackage.MISSION__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MissionImpl
