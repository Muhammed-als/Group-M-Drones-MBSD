/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.Drone;
import org.xtext.example.mydsl.myDsl.EnergyModel;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Drone</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DroneImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DroneImpl#getBatterCapacity <em>Batter Capacity</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DroneImpl#getMaxFlightTime <em>Max Flight Time</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DroneImpl#getPayloadCapacity <em>Payload Capacity</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DroneImpl#getRole <em>Role</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DroneImpl#getAddEnergyModel <em>Add Energy Model</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DroneImpl extends EntityImpl implements Drone
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getBatterCapacity() <em>Batter Capacity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatterCapacity()
   * @generated
   * @ordered
   */
  protected static final String BATTER_CAPACITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBatterCapacity() <em>Batter Capacity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatterCapacity()
   * @generated
   * @ordered
   */
  protected String batterCapacity = BATTER_CAPACITY_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxFlightTime() <em>Max Flight Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxFlightTime()
   * @generated
   * @ordered
   */
  protected static final String MAX_FLIGHT_TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMaxFlightTime() <em>Max Flight Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxFlightTime()
   * @generated
   * @ordered
   */
  protected String maxFlightTime = MAX_FLIGHT_TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getPayloadCapacity() <em>Payload Capacity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPayloadCapacity()
   * @generated
   * @ordered
   */
  protected static final String PAYLOAD_CAPACITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPayloadCapacity() <em>Payload Capacity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPayloadCapacity()
   * @generated
   * @ordered
   */
  protected String payloadCapacity = PAYLOAD_CAPACITY_EDEFAULT;

  /**
   * The default value of the '{@link #getRole() <em>Role</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected static final String ROLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRole() <em>Role</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected String role = ROLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getAddEnergyModel() <em>Add Energy Model</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAddEnergyModel()
   * @generated
   * @ordered
   */
  protected EList<EnergyModel> addEnergyModel;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DroneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.DRONE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DRONE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBatterCapacity()
  {
    return batterCapacity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatterCapacity(String newBatterCapacity)
  {
    String oldBatterCapacity = batterCapacity;
    batterCapacity = newBatterCapacity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DRONE__BATTER_CAPACITY, oldBatterCapacity, batterCapacity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMaxFlightTime()
  {
    return maxFlightTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxFlightTime(String newMaxFlightTime)
  {
    String oldMaxFlightTime = maxFlightTime;
    maxFlightTime = newMaxFlightTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DRONE__MAX_FLIGHT_TIME, oldMaxFlightTime, maxFlightTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPayloadCapacity()
  {
    return payloadCapacity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPayloadCapacity(String newPayloadCapacity)
  {
    String oldPayloadCapacity = payloadCapacity;
    payloadCapacity = newPayloadCapacity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DRONE__PAYLOAD_CAPACITY, oldPayloadCapacity, payloadCapacity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRole()
  {
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRole(String newRole)
  {
    String oldRole = role;
    role = newRole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DRONE__ROLE, oldRole, role));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EnergyModel> getAddEnergyModel()
  {
    if (addEnergyModel == null)
    {
      addEnergyModel = new EObjectResolvingEList<EnergyModel>(EnergyModel.class, this, MyDslPackage.DRONE__ADD_ENERGY_MODEL);
    }
    return addEnergyModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.DRONE__TYPE:
        return getType();
      case MyDslPackage.DRONE__BATTER_CAPACITY:
        return getBatterCapacity();
      case MyDslPackage.DRONE__MAX_FLIGHT_TIME:
        return getMaxFlightTime();
      case MyDslPackage.DRONE__PAYLOAD_CAPACITY:
        return getPayloadCapacity();
      case MyDslPackage.DRONE__ROLE:
        return getRole();
      case MyDslPackage.DRONE__ADD_ENERGY_MODEL:
        return getAddEnergyModel();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.DRONE__TYPE:
        setType((String)newValue);
        return;
      case MyDslPackage.DRONE__BATTER_CAPACITY:
        setBatterCapacity((String)newValue);
        return;
      case MyDslPackage.DRONE__MAX_FLIGHT_TIME:
        setMaxFlightTime((String)newValue);
        return;
      case MyDslPackage.DRONE__PAYLOAD_CAPACITY:
        setPayloadCapacity((String)newValue);
        return;
      case MyDslPackage.DRONE__ROLE:
        setRole((String)newValue);
        return;
      case MyDslPackage.DRONE__ADD_ENERGY_MODEL:
        getAddEnergyModel().clear();
        getAddEnergyModel().addAll((Collection<? extends EnergyModel>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DRONE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MyDslPackage.DRONE__BATTER_CAPACITY:
        setBatterCapacity(BATTER_CAPACITY_EDEFAULT);
        return;
      case MyDslPackage.DRONE__MAX_FLIGHT_TIME:
        setMaxFlightTime(MAX_FLIGHT_TIME_EDEFAULT);
        return;
      case MyDslPackage.DRONE__PAYLOAD_CAPACITY:
        setPayloadCapacity(PAYLOAD_CAPACITY_EDEFAULT);
        return;
      case MyDslPackage.DRONE__ROLE:
        setRole(ROLE_EDEFAULT);
        return;
      case MyDslPackage.DRONE__ADD_ENERGY_MODEL:
        getAddEnergyModel().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DRONE__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case MyDslPackage.DRONE__BATTER_CAPACITY:
        return BATTER_CAPACITY_EDEFAULT == null ? batterCapacity != null : !BATTER_CAPACITY_EDEFAULT.equals(batterCapacity);
      case MyDslPackage.DRONE__MAX_FLIGHT_TIME:
        return MAX_FLIGHT_TIME_EDEFAULT == null ? maxFlightTime != null : !MAX_FLIGHT_TIME_EDEFAULT.equals(maxFlightTime);
      case MyDslPackage.DRONE__PAYLOAD_CAPACITY:
        return PAYLOAD_CAPACITY_EDEFAULT == null ? payloadCapacity != null : !PAYLOAD_CAPACITY_EDEFAULT.equals(payloadCapacity);
      case MyDslPackage.DRONE__ROLE:
        return ROLE_EDEFAULT == null ? role != null : !ROLE_EDEFAULT.equals(role);
      case MyDslPackage.DRONE__ADD_ENERGY_MODEL:
        return addEnergyModel != null && !addEnergyModel.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", batterCapacity: ");
    result.append(batterCapacity);
    result.append(", maxFlightTime: ");
    result.append(maxFlightTime);
    result.append(", payloadCapacity: ");
    result.append(payloadCapacity);
    result.append(", role: ");
    result.append(role);
    result.append(')');
    return result.toString();
  }

} //DroneImpl
