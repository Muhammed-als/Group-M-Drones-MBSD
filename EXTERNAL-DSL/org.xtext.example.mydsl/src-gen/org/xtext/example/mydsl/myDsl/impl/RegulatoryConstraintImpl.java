/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.RegulatoryConstraint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Regulatory Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RegulatoryConstraintImpl#getFlightPermission <em>Flight Permission</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RegulatoryConstraintImpl#getAltitudeLimit <em>Altitude Limit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RegulatoryConstraintImpl extends ConstraintImpl implements RegulatoryConstraint
{
  /**
   * The default value of the '{@link #getFlightPermission() <em>Flight Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlightPermission()
   * @generated
   * @ordered
   */
  protected static final String FLIGHT_PERMISSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlightPermission() <em>Flight Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlightPermission()
   * @generated
   * @ordered
   */
  protected String flightPermission = FLIGHT_PERMISSION_EDEFAULT;

  /**
   * The default value of the '{@link #getAltitudeLimit() <em>Altitude Limit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAltitudeLimit()
   * @generated
   * @ordered
   */
  protected static final int ALTITUDE_LIMIT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getAltitudeLimit() <em>Altitude Limit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAltitudeLimit()
   * @generated
   * @ordered
   */
  protected int altitudeLimit = ALTITUDE_LIMIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RegulatoryConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.REGULATORY_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFlightPermission()
  {
    return flightPermission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlightPermission(String newFlightPermission)
  {
    String oldFlightPermission = flightPermission;
    flightPermission = newFlightPermission;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.REGULATORY_CONSTRAINT__FLIGHT_PERMISSION, oldFlightPermission, flightPermission));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getAltitudeLimit()
  {
    return altitudeLimit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAltitudeLimit(int newAltitudeLimit)
  {
    int oldAltitudeLimit = altitudeLimit;
    altitudeLimit = newAltitudeLimit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.REGULATORY_CONSTRAINT__ALTITUDE_LIMIT, oldAltitudeLimit, altitudeLimit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.REGULATORY_CONSTRAINT__FLIGHT_PERMISSION:
        return getFlightPermission();
      case MyDslPackage.REGULATORY_CONSTRAINT__ALTITUDE_LIMIT:
        return getAltitudeLimit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.REGULATORY_CONSTRAINT__FLIGHT_PERMISSION:
        setFlightPermission((String)newValue);
        return;
      case MyDslPackage.REGULATORY_CONSTRAINT__ALTITUDE_LIMIT:
        setAltitudeLimit((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.REGULATORY_CONSTRAINT__FLIGHT_PERMISSION:
        setFlightPermission(FLIGHT_PERMISSION_EDEFAULT);
        return;
      case MyDslPackage.REGULATORY_CONSTRAINT__ALTITUDE_LIMIT:
        setAltitudeLimit(ALTITUDE_LIMIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.REGULATORY_CONSTRAINT__FLIGHT_PERMISSION:
        return FLIGHT_PERMISSION_EDEFAULT == null ? flightPermission != null : !FLIGHT_PERMISSION_EDEFAULT.equals(flightPermission);
      case MyDslPackage.REGULATORY_CONSTRAINT__ALTITUDE_LIMIT:
        return altitudeLimit != ALTITUDE_LIMIT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (flightPermission: ");
    result.append(flightPermission);
    result.append(", altitudeLimit: ");
    result.append(altitudeLimit);
    result.append(')');
    return result.toString();
  }

} //RegulatoryConstraintImpl
