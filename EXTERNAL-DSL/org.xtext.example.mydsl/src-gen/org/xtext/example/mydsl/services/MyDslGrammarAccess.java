/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Assignment cRelationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationsRelationParserRuleCall_3_0 = (RuleCall)cRelationsAssignment_3.eContents().get(0);
		
		//Model:
		//    'system' name=ID
		//    entities+=Entity*              // Zero or more entities
		//    relations+=Relation*           // Zero or more relations
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID
		//entities+=Entity*              // Zero or more entities
		//relations+=Relation*
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_2_0() { return cEntitiesEntityParserRuleCall_2_0; }
		
		//          // Zero or more entities
		//relations+=Relation*
		public Assignment getRelationsAssignment_3() { return cRelationsAssignment_3; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_3_0() { return cRelationsRelationParserRuleCall_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMissionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDroneGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDroneParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstraintClassesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// This allows 'entities' in the model to include any of these.
		//Entity:
		//    Mission | DroneGroup | Drone | Action | ConstraintClasses;
		@Override public ParserRule getRule() { return rule; }
		
		//Mission | DroneGroup | Drone | Action | ConstraintClasses
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Mission
		public RuleCall getMissionParserRuleCall_0() { return cMissionParserRuleCall_0; }
		
		//DroneGroup
		public RuleCall getDroneGroupParserRuleCall_1() { return cDroneGroupParserRuleCall_1; }
		
		//Drone
		public RuleCall getDroneParserRuleCall_2() { return cDroneParserRuleCall_2; }
		
		//Action
		public RuleCall getActionParserRuleCall_3() { return cActionParserRuleCall_3; }
		
		//ConstraintClasses
		public RuleCall getConstraintClassesParserRuleCall_4() { return cConstraintClassesParserRuleCall_4; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDroneGroupKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDroneGroupAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDroneGroupDroneGroupCrossReference_7_0 = (CrossReference)cDroneGroupAssignment_7.eContents().get(0);
		private final RuleCall cDroneGroupDroneGroupIDTerminalRuleCall_7_0_1 = (RuleCall)cDroneGroupDroneGroupCrossReference_7_0.eContents().get(1);
		private final Keyword cActionsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cActionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cActionsActionExpressionParserRuleCall_10_0 = (RuleCall)cActionsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cConstraintsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cEqualsSignKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_11_3 = (Group)cGroup_11.eContents().get(3);
		private final Assignment cConstraintsAssignment_11_3_0 = (Assignment)cGroup_11_3.eContents().get(0);
		private final CrossReference cConstraintsConstraintClassesCrossReference_11_3_0_0 = (CrossReference)cConstraintsAssignment_11_3_0.eContents().get(0);
		private final RuleCall cConstraintsConstraintClassesIDTerminalRuleCall_11_3_0_0_1 = (RuleCall)cConstraintsConstraintClassesCrossReference_11_3_0_0.eContents().get(1);
		private final Group cGroup_11_3_1 = (Group)cGroup_11_3.eContents().get(1);
		private final Keyword cCommaKeyword_11_3_1_0 = (Keyword)cGroup_11_3_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_11_3_1_1 = (Assignment)cGroup_11_3_1.eContents().get(1);
		private final CrossReference cConstraintsConstraintClassesCrossReference_11_3_1_1_0 = (CrossReference)cConstraintsAssignment_11_3_1_1.eContents().get(0);
		private final RuleCall cConstraintsConstraintClassesIDTerminalRuleCall_11_3_1_1_0_1 = (RuleCall)cConstraintsConstraintClassesCrossReference_11_3_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		///*
		// * Mission definition, with required and optional fields.
		// * Includes a name, reference to a drone group, an action expression,
		// * and an optional list of constraints.
		// */
		//Mission:
		//    'Mission' '{'
		//        'name' '=' name=ID
		//        'droneGroup' '=' droneGroup=[DroneGroup] // Reference to a DroneGroup
		//        'actions' '=' actions=ActionExpression // Parsed action expression
		//        ('constraints' '=' '[' (constraints+=[ConstraintClasses] (',' constraints+=[ConstraintClasses])*)? ']')?  // Optional list of constraints
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mission' '{'
		//    'name' '=' name=ID
		//    'droneGroup' '=' droneGroup=[DroneGroup] // Reference to a DroneGroup
		//    'actions' '=' actions=ActionExpression // Parsed action expression
		//    ('constraints' '=' '[' (constraints+=[ConstraintClasses] (',' constraints+=[ConstraintClasses])*)? ']')?  // Optional list of constraints
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mission'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'droneGroup'
		public Keyword getDroneGroupKeyword_5() { return cDroneGroupKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//droneGroup=[DroneGroup]
		public Assignment getDroneGroupAssignment_7() { return cDroneGroupAssignment_7; }
		
		//[DroneGroup]
		public CrossReference getDroneGroupDroneGroupCrossReference_7_0() { return cDroneGroupDroneGroupCrossReference_7_0; }
		
		//ID
		public RuleCall getDroneGroupDroneGroupIDTerminalRuleCall_7_0_1() { return cDroneGroupDroneGroupIDTerminalRuleCall_7_0_1; }
		
		//// Reference to a DroneGroup
		//       'actions'
		public Keyword getActionsKeyword_8() { return cActionsKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//actions=ActionExpression
		public Assignment getActionsAssignment_10() { return cActionsAssignment_10; }
		
		//ActionExpression
		public RuleCall getActionsActionExpressionParserRuleCall_10_0() { return cActionsActionExpressionParserRuleCall_10_0; }
		
		//// Parsed action expression
		//       ('constraints' '=' '[' (constraints+=[ConstraintClasses] (',' constraints+=[ConstraintClasses])*)? ']')?
		public Group getGroup_11() { return cGroup_11; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_11_0() { return cConstraintsKeyword_11_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_11_1() { return cEqualsSignKeyword_11_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_11_2() { return cLeftSquareBracketKeyword_11_2; }
		
		//(constraints+=[ConstraintClasses] (',' constraints+=[ConstraintClasses])*)?
		public Group getGroup_11_3() { return cGroup_11_3; }
		
		//constraints+=[ConstraintClasses]
		public Assignment getConstraintsAssignment_11_3_0() { return cConstraintsAssignment_11_3_0; }
		
		//[ConstraintClasses]
		public CrossReference getConstraintsConstraintClassesCrossReference_11_3_0_0() { return cConstraintsConstraintClassesCrossReference_11_3_0_0; }
		
		//ID
		public RuleCall getConstraintsConstraintClassesIDTerminalRuleCall_11_3_0_0_1() { return cConstraintsConstraintClassesIDTerminalRuleCall_11_3_0_0_1; }
		
		//(',' constraints+=[ConstraintClasses])*
		public Group getGroup_11_3_1() { return cGroup_11_3_1; }
		
		//','
		public Keyword getCommaKeyword_11_3_1_0() { return cCommaKeyword_11_3_1_0; }
		
		//constraints+=[ConstraintClasses]
		public Assignment getConstraintsAssignment_11_3_1_1() { return cConstraintsAssignment_11_3_1_1; }
		
		//[ConstraintClasses]
		public CrossReference getConstraintsConstraintClassesCrossReference_11_3_1_1_0() { return cConstraintsConstraintClassesCrossReference_11_3_1_1_0; }
		
		//ID
		public RuleCall getConstraintsConstraintClassesIDTerminalRuleCall_11_3_1_1_0_1() { return cConstraintsConstraintClassesIDTerminalRuleCall_11_3_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11_4() { return cRightSquareBracketKeyword_11_4; }
		
		//// Optional list of constraints
		//  '}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class ActionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ActionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMissionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Defines what can be referred to inside action expressions.
		// * It can be either an Action or another Mission.
		// */
		//ActionElement:
		//    Action | Mission
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Action | Mission
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }
		
		//Mission
		public RuleCall getMissionParserRuleCall_1() { return cMissionParserRuleCall_1; }
	}
	public class ActionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ActionExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*
		// * Entry rule for parsing action expressions like:
		// * action1 then action2 or Mission3
		// */
		//ActionExpression:
		//    OrExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightThenExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///*
		// * 'or' expressions: lowest precedence
		// * Allows chaining like: (A then B) or C or D
		// */
		//OrExpression returns ActionExpression:
		//    ThenExpression ({OrExpression.left=current} 'or' right=ThenExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ThenExpression ({OrExpression.left=current} 'or' right=ThenExpression)*
		public Group getGroup() { return cGroup; }
		
		//ThenExpression
		public RuleCall getThenExpressionParserRuleCall_0() { return cThenExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'or' right=ThenExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=ThenExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ThenExpression
		public RuleCall getRightThenExpressionParserRuleCall_1_2_0() { return cRightThenExpressionParserRuleCall_1_2_0; }
	}
	public class ThenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ThenExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cThenExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThenKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///*
		// * 'then' expressions: higher precedence than 'or'
		// * Allows chaining like: A then B then C
		// */
		//ThenExpression returns ActionExpression:
		//    PrimaryExpression ({ThenExpression.left=current} 'then' right=PrimaryExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({ThenExpression.left=current} 'then' right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({ThenExpression.left=current} 'then' right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ThenExpression.left=current}
		public Action getThenExpressionLeftAction_1_0() { return cThenExpressionLeftAction_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_1() { return cThenKeyword_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionActionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cActionRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cActionRefActionElementCrossReference_1_0 = (CrossReference)cActionRefAssignment_1.eContents().get(0);
		private final RuleCall cActionRefActionElementIDTerminalRuleCall_1_0_1 = (RuleCall)cActionRefActionElementCrossReference_1_0.eContents().get(1);
		
		///*
		// * Handles parentheses and basic elements (action or mission references)
		// * Supports nested expressions via parentheses.
		// */
		//PrimaryExpression:
		//    '(' expression=ActionExpression ')' | // e.g., (Mission1 or action1)
		//    actionRef=[ActionElement] // A reference to either an Action or another Mission
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' expression=ActionExpression ')' | // e.g., (Mission1 or action1)
		//actionRef=[ActionElement]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' expression=ActionExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//expression=ActionExpression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//ActionExpression
		public RuleCall getExpressionActionExpressionParserRuleCall_0_1_0() { return cExpressionActionExpressionParserRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//// e.g., (Mission1 or action1)
		//   actionRef=[ActionElement]
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }
		
		//[ActionElement]
		public CrossReference getActionRefActionElementCrossReference_1_0() { return cActionRefActionElementCrossReference_1_0; }
		
		//ID
		public RuleCall getActionRefActionElementIDTerminalRuleCall_1_0_1() { return cActionRefActionElementIDTerminalRuleCall_1_0_1; }
	}
	public class DroneGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DroneGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDroneGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDronesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDronesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cDronesDroneCrossReference_8_0 = (CrossReference)cDronesAssignment_8.eContents().get(0);
		private final RuleCall cDronesDroneIDTerminalRuleCall_8_0_1 = (RuleCall)cDronesDroneCrossReference_8_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cDronesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cDronesDroneCrossReference_9_1_0 = (CrossReference)cDronesAssignment_9_1.eContents().get(0);
		private final RuleCall cDronesDroneIDTerminalRuleCall_9_1_0_1 = (RuleCall)cDronesDroneCrossReference_9_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		///*
		// * DroneGroup definition, containing a list of drones.
		// */
		//DroneGroup:
		//    'DroneGroup' '{'
		//        'name' '=' name=ID
		//        'drones' '=' '[' drones+=[Drone] (',' drones+=[Drone])* ']' // Drone list
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'DroneGroup' '{'
		//    'name' '=' name=ID
		//    'drones' '=' '[' drones+=[Drone] (',' drones+=[Drone])* ']' // Drone list
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DroneGroup'
		public Keyword getDroneGroupKeyword_0() { return cDroneGroupKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'drones'
		public Keyword getDronesKeyword_5() { return cDronesKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//drones+=[Drone]
		public Assignment getDronesAssignment_8() { return cDronesAssignment_8; }
		
		//[Drone]
		public CrossReference getDronesDroneCrossReference_8_0() { return cDronesDroneCrossReference_8_0; }
		
		//ID
		public RuleCall getDronesDroneIDTerminalRuleCall_8_0_1() { return cDronesDroneIDTerminalRuleCall_8_0_1; }
		
		//(',' drones+=[Drone])*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//drones+=[Drone]
		public Assignment getDronesAssignment_9_1() { return cDronesAssignment_9_1; }
		
		//[Drone]
		public CrossReference getDronesDroneCrossReference_9_1_0() { return cDronesDroneCrossReference_9_1_0; }
		
		//ID
		public RuleCall getDronesDroneIDTerminalRuleCall_9_1_0_1() { return cDronesDroneIDTerminalRuleCall_9_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//// Drone list
		//   '}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class DroneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Drone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDroneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cIpKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIpSTRINGTerminalRuleCall_7_0 = (RuleCall)cIpAssignment_7.eContents().get(0);
		private final Keyword cSerialNumberKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSerialNumberAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSerialNumberSTRINGTerminalRuleCall_10_0 = (RuleCall)cSerialNumberAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		///*
		// * Drone definition with basic identifying information.
		// */
		//Drone:
		//    'Drone' '{'
		//        'name' '=' name=ID
		//        'ip' '=' ip=STRING
		//        'serialNumber' '=' serialNumber=STRING
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Drone' '{'
		//    'name' '=' name=ID
		//    'ip' '=' ip=STRING
		//    'serialNumber' '=' serialNumber=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Drone'
		public Keyword getDroneKeyword_0() { return cDroneKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'ip'
		public Keyword getIpKeyword_5() { return cIpKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//ip=STRING
		public Assignment getIpAssignment_7() { return cIpAssignment_7; }
		
		//STRING
		public RuleCall getIpSTRINGTerminalRuleCall_7_0() { return cIpSTRINGTerminalRuleCall_7_0; }
		
		//'serialNumber'
		public Keyword getSerialNumberKeyword_8() { return cSerialNumberKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//serialNumber=STRING
		public Assignment getSerialNumberAssignment_10() { return cSerialNumberAssignment_10; }
		
		//STRING
		public RuleCall getSerialNumberSTRINGTerminalRuleCall_10_0() { return cSerialNumberSTRINGTerminalRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTypeSTRINGTerminalRuleCall_10_0 = (RuleCall)cTypeAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		///*
		// * Action definition with basic identifying information.
		// */
		//Action:
		//    'Action' '{'
		//        'name' '=' name=ID
		//        'description' '=' description=STRING
		//        'type' '=' type=STRING
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Action' '{'
		//    'name' '=' name=ID
		//    'description' '=' description=STRING
		//    'type' '=' type=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//'type'
		public Keyword getTypeKeyword_8() { return cTypeKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//type=STRING
		public Assignment getTypeAssignment_10() { return cTypeAssignment_10; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_10_0() { return cTypeSTRINGTerminalRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ConstraintClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ConstraintClasses");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPermissionConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegulatoryConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * rule to group all types of constraints.
		// * This lets missions refer to a uniform list of constraint types.
		// */
		//ConstraintClasses:
		//    Constraint | PermissionConstraint | RegulatoryConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//Constraint | PermissionConstraint | RegulatoryConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_0() { return cConstraintParserRuleCall_0; }
		
		//PermissionConstraint
		public RuleCall getPermissionConstraintParserRuleCall_1() { return cPermissionConstraintParserRuleCall_1; }
		
		//RegulatoryConstraint
		public RuleCall getRegulatoryConstraintParserRuleCall_2() { return cRegulatoryConstraintParserRuleCall_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// * Basic constraint with name and description.
		// */
		//Constraint:
		//    'Constraint' '{'
		//        'name' '=' name=ID
		//        'description' '=' description=STRING
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Constraint' '{'
		//    'name' '=' name=ID
		//    'description' '=' description=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PermissionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PermissionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPermissionConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// * Basic PermissionConstraint with name and optional description.
		// */
		//PermissionConstraint:
		//    'PermissionConstraint' '{'
		//        'name' '=' name=ID
		//        'description' '=' description=STRING?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PermissionConstraint' '{'
		//    'name' '=' name=ID
		//    'description' '=' description=STRING?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'PermissionConstraint'
		public Keyword getPermissionConstraintKeyword_0() { return cPermissionConstraintKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class RegulatoryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RegulatoryConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegulatoryConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// * Basic RegulatoryConstraint with name and optional description.
		// */
		//RegulatoryConstraint:
		//    'RegulatoryConstraint' '{'
		//        'name' '=' name=ID
		//        'description' '=' description=STRING?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RegulatoryConstraint' '{'
		//    'name' '=' name=ID
		//    'description' '=' description=STRING?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'RegulatoryConstraint'
		public Keyword getRegulatoryConstraintKeyword_0() { return cRegulatoryConstraintKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cFromKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFromAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cFromEntityCrossReference_7_0 = (CrossReference)cFromAssignment_7.eContents().get(0);
		private final RuleCall cFromEntityIDTerminalRuleCall_7_0_1 = (RuleCall)cFromEntityCrossReference_7_0.eContents().get(1);
		private final Keyword cToKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cToAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cToEntityCrossReference_10_0 = (CrossReference)cToAssignment_10.eContents().get(0);
		private final RuleCall cToEntityIDTerminalRuleCall_10_0_1 = (RuleCall)cToEntityCrossReference_10_0.eContents().get(1);
		private final Keyword cTypeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cTypeAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTypeSTRINGTerminalRuleCall_13_0 = (RuleCall)cTypeAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		///*
		// * Defines a relation (edge) between two entities in the system.
		// * You can define relation types like "uses", "dependsOn", etc.
		// */
		//Relation:
		//    'Relation' '{'
		//        'name' '=' name=ID
		//        'from' '=' from=[Entity] // Source entity
		//        'to' '=' to=[Entity] // Target entity
		//        'type' '=' type=STRING  // e.g., "dependency", "uses", "inherits"
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Relation' '{'
		//    'name' '=' name=ID
		//    'from' '=' from=[Entity] // Source entity
		//    'to' '=' to=[Entity] // Target entity
		//    'type' '=' type=STRING  // e.g., "dependency", "uses", "inherits"
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'from'
		public Keyword getFromKeyword_5() { return cFromKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//from=[Entity]
		public Assignment getFromAssignment_7() { return cFromAssignment_7; }
		
		//[Entity]
		public CrossReference getFromEntityCrossReference_7_0() { return cFromEntityCrossReference_7_0; }
		
		//ID
		public RuleCall getFromEntityIDTerminalRuleCall_7_0_1() { return cFromEntityIDTerminalRuleCall_7_0_1; }
		
		//// Source entity
		//       'to'
		public Keyword getToKeyword_8() { return cToKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//to=[Entity]
		public Assignment getToAssignment_10() { return cToAssignment_10; }
		
		//[Entity]
		public CrossReference getToEntityCrossReference_10_0() { return cToEntityCrossReference_10_0; }
		
		//ID
		public RuleCall getToEntityIDTerminalRuleCall_10_0_1() { return cToEntityIDTerminalRuleCall_10_0_1; }
		
		//// Target entity
		//       'type'
		public Keyword getTypeKeyword_11() { return cTypeKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//type=STRING
		public Assignment getTypeAssignment_13() { return cTypeAssignment_13; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_13_0() { return cTypeSTRINGTerminalRuleCall_13_0; }
		
		//// e.g., "dependency", "uses", "inherits"
		//  '}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final MissionElements pMission;
	private final ActionElementElements pActionElement;
	private final ActionExpressionElements pActionExpression;
	private final OrExpressionElements pOrExpression;
	private final ThenExpressionElements pThenExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final DroneGroupElements pDroneGroup;
	private final DroneElements pDrone;
	private final ActionElements pAction;
	private final ConstraintClassesElements pConstraintClasses;
	private final ConstraintElements pConstraint;
	private final PermissionConstraintElements pPermissionConstraint;
	private final RegulatoryConstraintElements pRegulatoryConstraint;
	private final RelationElements pRelation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pMission = new MissionElements();
		this.pActionElement = new ActionElementElements();
		this.pActionExpression = new ActionExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pThenExpression = new ThenExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pDroneGroup = new DroneGroupElements();
		this.pDrone = new DroneElements();
		this.pAction = new ActionElements();
		this.pConstraintClasses = new ConstraintClassesElements();
		this.pConstraint = new ConstraintElements();
		this.pPermissionConstraint = new PermissionConstraintElements();
		this.pRegulatoryConstraint = new RegulatoryConstraintElements();
		this.pRelation = new RelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'system' name=ID
	//    entities+=Entity*              // Zero or more entities
	//    relations+=Relation*           // Zero or more relations
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// This allows 'entities' in the model to include any of these.
	//Entity:
	//    Mission | DroneGroup | Drone | Action | ConstraintClasses;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	///*
	// * Mission definition, with required and optional fields.
	// * Includes a name, reference to a drone group, an action expression,
	// * and an optional list of constraints.
	// */
	//Mission:
	//    'Mission' '{'
	//        'name' '=' name=ID
	//        'droneGroup' '=' droneGroup=[DroneGroup] // Reference to a DroneGroup
	//        'actions' '=' actions=ActionExpression // Parsed action expression
	//        ('constraints' '=' '[' (constraints+=[ConstraintClasses] (',' constraints+=[ConstraintClasses])*)? ']')?  // Optional list of constraints
	//    '}'
	//;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	///*
	// * Defines what can be referred to inside action expressions.
	// * It can be either an Action or another Mission.
	// */
	//ActionElement:
	//    Action | Mission
	//;
	public ActionElementElements getActionElementAccess() {
		return pActionElement;
	}
	
	public ParserRule getActionElementRule() {
		return getActionElementAccess().getRule();
	}
	
	///*
	// * Entry rule for parsing action expressions like:
	// * action1 then action2 or Mission3
	// */
	//ActionExpression:
	//    OrExpression
	//;
	public ActionExpressionElements getActionExpressionAccess() {
		return pActionExpression;
	}
	
	public ParserRule getActionExpressionRule() {
		return getActionExpressionAccess().getRule();
	}
	
	///*
	// * 'or' expressions: lowest precedence
	// * Allows chaining like: (A then B) or C or D
	// */
	//OrExpression returns ActionExpression:
	//    ThenExpression ({OrExpression.left=current} 'or' right=ThenExpression)*
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	///*
	// * 'then' expressions: higher precedence than 'or'
	// * Allows chaining like: A then B then C
	// */
	//ThenExpression returns ActionExpression:
	//    PrimaryExpression ({ThenExpression.left=current} 'then' right=PrimaryExpression)*
	//;
	public ThenExpressionElements getThenExpressionAccess() {
		return pThenExpression;
	}
	
	public ParserRule getThenExpressionRule() {
		return getThenExpressionAccess().getRule();
	}
	
	///*
	// * Handles parentheses and basic elements (action or mission references)
	// * Supports nested expressions via parentheses.
	// */
	//PrimaryExpression:
	//    '(' expression=ActionExpression ')' | // e.g., (Mission1 or action1)
	//    actionRef=[ActionElement] // A reference to either an Action or another Mission
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	///*
	// * DroneGroup definition, containing a list of drones.
	// */
	//DroneGroup:
	//    'DroneGroup' '{'
	//        'name' '=' name=ID
	//        'drones' '=' '[' drones+=[Drone] (',' drones+=[Drone])* ']' // Drone list
	//    '}'
	//;
	public DroneGroupElements getDroneGroupAccess() {
		return pDroneGroup;
	}
	
	public ParserRule getDroneGroupRule() {
		return getDroneGroupAccess().getRule();
	}
	
	///*
	// * Drone definition with basic identifying information.
	// */
	//Drone:
	//    'Drone' '{'
	//        'name' '=' name=ID
	//        'ip' '=' ip=STRING
	//        'serialNumber' '=' serialNumber=STRING
	//    '}'
	//;
	public DroneElements getDroneAccess() {
		return pDrone;
	}
	
	public ParserRule getDroneRule() {
		return getDroneAccess().getRule();
	}
	
	///*
	// * Action definition with basic identifying information.
	// */
	//Action:
	//    'Action' '{'
	//        'name' '=' name=ID
	//        'description' '=' description=STRING
	//        'type' '=' type=STRING
	//    '}'
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	///*
	// * rule to group all types of constraints.
	// * This lets missions refer to a uniform list of constraint types.
	// */
	//ConstraintClasses:
	//    Constraint | PermissionConstraint | RegulatoryConstraint;
	public ConstraintClassesElements getConstraintClassesAccess() {
		return pConstraintClasses;
	}
	
	public ParserRule getConstraintClassesRule() {
		return getConstraintClassesAccess().getRule();
	}
	
	///*
	// * Basic constraint with name and description.
	// */
	//Constraint:
	//    'Constraint' '{'
	//        'name' '=' name=ID
	//        'description' '=' description=STRING
	//    '}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	///*
	// * Basic PermissionConstraint with name and optional description.
	// */
	//PermissionConstraint:
	//    'PermissionConstraint' '{'
	//        'name' '=' name=ID
	//        'description' '=' description=STRING?
	//    '}';
	public PermissionConstraintElements getPermissionConstraintAccess() {
		return pPermissionConstraint;
	}
	
	public ParserRule getPermissionConstraintRule() {
		return getPermissionConstraintAccess().getRule();
	}
	
	///*
	// * Basic RegulatoryConstraint with name and optional description.
	// */
	//RegulatoryConstraint:
	//    'RegulatoryConstraint' '{'
	//        'name' '=' name=ID
	//        'description' '=' description=STRING?
	//    '}';
	public RegulatoryConstraintElements getRegulatoryConstraintAccess() {
		return pRegulatoryConstraint;
	}
	
	public ParserRule getRegulatoryConstraintRule() {
		return getRegulatoryConstraintAccess().getRule();
	}
	
	///*
	// * Defines a relation (edge) between two entities in the system.
	// * You can define relation types like "uses", "dependsOn", etc.
	// */
	//Relation:
	//    'Relation' '{'
	//        'name' '=' name=ID
	//        'from' '=' from=[Entity] // Source entity
	//        'to' '=' to=[Entity] // Target entity
	//        'type' '=' type=STRING  // e.g., "dependency", "uses", "inherits"
	//    '}';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
