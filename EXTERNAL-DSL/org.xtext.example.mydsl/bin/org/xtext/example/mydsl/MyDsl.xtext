grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"


Model:
    'system' name=ID
    entities+=Entity*
    relations+=Relation*
;

Entity:
    Mission | DroneGroup | Drone | Action | ConstraintClasses;

Mission:
    'Mission' '{'
    	'name' '=' name=ID
        'droneGroup' '=' droneGroup=[DroneGroup]
        'actions' '=' actions=ActionExpression
        ('constraints' '=' '[' (constraints+=[ConstraintClasses] (',' constraints+=[ConstraintClasses])*)? ']')?
    '}'
;
ActionElement:
    Action | Mission
;

// action expressions (like "action1 then action2 or Mission3")
ActionExpression:
    OrExpression
;
// Handle the 'or' operator, lowest precedence
// Allow doing the following: (A then B) or C or D
OrExpression returns ActionExpression:
    ThenExpression ({OrExpression.left=current} 'or' right=ThenExpression)*
;

// Handles the 'then' operator, higher precedence than 'or'.
// Allow doing the following:  A then B then C
ThenExpression returns ActionExpression:
    PrimaryExpression ({ThenExpression.left=current} 'then' right=PrimaryExpression)*
;

PrimaryExpression:
    '(' expression=ActionExpression ')' | // e.g., (Mission1 or action1)
    actionRef=[ActionElement] // A reference to either an Action or another Mission
;

DroneGroup:
	'DroneGroup' '{'
    	'name' '=' name=ID
		'drones' '=' '[' drones+=[Drone] (',' drones+=[Drone])* ']'
	'}'
;
Drone:
    'Drone' '{'
    	'name' '=' name=ID
        'ip' '=' ip=STRING
        'serialNumber' '=' serialNumber=STRING 
    '}'
;

Action:
    'Action' '{'
    	'name' '=' name=ID
        'description' '=' description=STRING
        'type' '=' type=STRING
    '}'
;

ConstraintClasses:
    Constraint | PermissionConstraint | RegulatoryConstraint;

Constraint:
    'Constraint' '{'
    	'name' '=' name=ID
        'description' '=' description=STRING
    '}';

PermissionConstraint:
    'PermissionConstraint' '{'
    	'name' '=' name=ID
        'description' '=' description=STRING?
    '}';

RegulatoryConstraint:
    'RegulatoryConstraint' '{'
    	'name' '=' name=ID
        'description' '=' description=STRING?
    '}';

Relation:
    'Relation' '{'
    	'name' '=' name=ID
        'from' '=' from=[Entity]
        'to' '=' to=[Entity]
        'type' '=' type=STRING  // e.g., "dependency", "uses", "inherits"
    '}';

