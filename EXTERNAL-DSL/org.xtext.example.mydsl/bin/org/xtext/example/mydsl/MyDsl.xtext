grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
    systemRoot=SystemRoot
    entities+=Entity*
    relations+=Relation*
;

SystemRoot:
    'system' name=ID
    entities+=Entity*
    relations+=Relation*
;

Entity:
    Mission | Drone | EnergyModel | Phase | SubPhase | Action | ConstraintClasses | MissionEvent;

Mission:
    'Mission' name=ID '{'
        'missionID' '=' id=STRING
        'missionType' '=' missionType=STRING
        'startLocation' '=' startLocation=STRING
        'endLocation' '=' endLocation=STRING
        'priority' '=' priority=INT
        'estimatedTime' '=' estimatedTime=FLOAT
        'addDrone' '=' addDrones+=[Drone] (',' addDrones+=[Drone])*
        'addPhase' '=' addPhases+=[Phase] (',' addPhases+=[Phase])*
        'addConstraint' '=' addConstraints+=[ConstraintClasses] (',' addConstraints+=[ConstraintClasses])*
        'addEvent' '=' addEvents+=[MissionEvent] (',' addEvents+=[MissionEvent])*
    '}';

Drone:
    'Drone' name=ID '{'
        'modelType' '=' type=STRING
        'batterCapacity' '=' batterCapacity=FLOAT
        'maxFlightTime' '=' maxFlightTime=FLOAT
        'payloadCapacity' '=' payloadCapacity=FLOAT
        'role' '=' role=STRING
        'addEnergyModel' '=' addEnergyModel+=[EnergyModel] (',' addEnergyModel+=[EnergyModel])*
    '}';

EnergyModel:
    'EnergyModel' name=ID '{'
        'consumptionRate' '=' consumptionRate=FLOAT
        'batteryHealth' '=' batteryHealth=FLOAT
        'rechargeTime' '=' rechargeTime=FLOAT
    '}';

Phase:
    'Phase' name=ID '{'
        'phaseType' '=' phaseType=STRING
        'energyUsage' '=' energyUsage=FLOAT
        'addSubPhase' '=' addSubPhase+=[SubPhase] (',' addSubPhase+=[SubPhase])*
    '}';

SubPhase:
    'SubPhase' name=ID '{'
        'subPhaseType' '=' subPhaseType=STRING
        'duration' '=' duration=FLOAT
        'addAction' '=' addAction+=[Action] (',' addAction+=[Action])*
    '}';

Action:
    'Action' name=ID '{'
        'actionType' '=' actionType=STRING
        'inputOutput' '=' inputOutput=STRING
        'energyUsage' '=' energyUsage=FLOAT
    '}';

ConstraintClasses:
    Constraint | SafetyConstraint | RegulatoryConstraint;

Constraint:
    'Constraint' name=ID '{'
        'constraintType' '=' constraintType=STRING
        'description' '=' description=STRING
    '}';

SafetyConstraint:
    'SafetyConstraint' name=ID '{'
        'constraintType' '=' constraintType=STRING?
        'description' '=' description=STRING?
        'minBattery' '=' minBattery=FLOAT
        'maxWindSpeed' '=' maxWindSpeed=FLOAT
    '}';

RegulatoryConstraint:
    'RegulatoryConstraint' name=ID '{'
        'constraintType' '=' constraintType=STRING?
        'description' '=' description=STRING?
        'flightPermission' '=' flightPermission=BOOLEAN
        'altitudeLimit' '=' altitudeLimit=INT
    '}';

MissionEvent:
    'MissionEvent' name=ID '{'
        'eventType' '=' eventType=STRING
        'impactLevel' '=' impactLevel=INT
        'responseAction' '=' responseAction=STRING
    '}';

Relation:
    'Relation' name=ID '{'
        'from' '=' from=[Entity]
        'to' '=' to=[Entity]
        'type' '=' type=STRING  // e.g., "dependency", "uses", "inherits"
    '}';

FLOAT returns ecore::EFloat:
    INT '.' INT?;

terminal BOOLEAN:
    ('true' | 'false');
