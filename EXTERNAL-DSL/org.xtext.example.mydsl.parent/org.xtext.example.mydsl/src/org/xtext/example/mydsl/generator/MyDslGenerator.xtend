/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
// org.xtext.example.mydsl\src-gen\org\xtext\example\mydsl\myDsl
import org.xtext.example.mydsl.myDsl.Action
import org.xtext.example.mydsl.myDsl.Constraint
import org.xtext.example.mydsl.myDsl.Drone
import org.xtext.example.mydsl.myDsl.EnergyModel
import org.xtext.example.mydsl.myDsl.Mission
import org.xtext.example.mydsl.myDsl.MissionEvent
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.Phase
import org.xtext.example.mydsl.myDsl.RegulatoryConstraint
import org.xtext.example.mydsl.myDsl.SafetyConstraint
import org.xtext.example.mydsl.myDsl.SubPhase
import org.xtext.example.mydsl.myDsl.MyDslFactory
import org.xtext.example.mydsl.myDsl.MyDslPackage




/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Reads the DSL model that contains all models (Mission,Drone, Action, ...)
		resource.contents.filter(typeof(Model)).forEach [model | 
			// model.missions is automatically translated to model.getMissions()
			// it = current item in the loop
			// fsa = FileSystemAccess2
			model.missions.forEach [ generateMission(it, fsa) ]
            model.drones.forEach [ generateDrone(it, fsa) ]
            model.energyModels.forEach [ generateEnergyModel(it, fsa) ]
            model.phases.forEach [ generatePhase(it, fsa) ]
            model.subPhases.forEach [ generateSubPhase(it, fsa) ]
            model.actions.forEach [ generateAction(it, fsa) ]
            model.constraints.forEach [ generateConstraint(it, fsa) ]
            model.missionEVents.forEach [ generateMissionEvent(it, fsa) ]
			
		]
	}
	def void generateMission(Mission mission, IFileSystemAccess2 fsa){
        val fileName = setFileName(mission.name)
		val content = '''
            public class «mission.name» {
                private String missionID = "«mission.missionID»";
                private String missionType = "«mission.missionType»";
                private String startLocation = "«mission.startLocation»";
                private String endLocation = "«mission.endLocation»";
                private int priority = «mission.priority»;
                private float estimatedTime = «mission.estimatedTime»f;
                private List<Drone> drones = new ArrayList<>();
                private List<Phase> phases = new ArrayList<>();
            	private List<Constraint> constraints = new ArrayList<>();
            	private List<Event> events = new ArrayList<>();
            	public «mission.name» (String missionID, String missionType, String startLocation, String endLocation, int priority, float estimatedTime) {
	                this.missionID = missionID;
	                this.missionType = missionType;
	                this.startLocation = startLocation;
	                this.endLocation = endLocation;
	                this.priority = priority;
	                this.estimatedTime = estimatedTime;
				}
	            public void addDrone(Drone drone) {
	                this.addDrones.add(drone);
	            }
				
	            public void addPhase(Phase phase) {
	                this.addPhases.add(phase);
	            }
				
	            public void addConstraint(Constraint constraint) {
	                this.addConstraints.add(constraint);
	            }
				
	            public void addEvent(MissionEvent event) {
	                this.addEvents.add(event);
	            }
                
            }
        '''
        fsa.generateFile(fileName, content)
	}
	def void generateDrone(Drone drone, IFileSystemAccess2 fsa) {
        val fileName = setFileName(drone.name)
        val content = '''
            public class «drone.name» {
                private String modelType = "«drone.modelType»";
                private float batteryCapacity = «drone.batterCapacity»f;
                private float maxFlightTime = «drone.maxFlightTime»f;
                private float payloadCapacity = «drone.payloadCapacity»f;
                private String role = "«drone.role»";
                private List<EnergyModel> energyModels = new ArrayList<>();
            }
            public «drone.name» (String modelType, float batteryCapacity, float maxFlightTime, float payloadCapacity, String role) {
                this.modelType = modelType;
                this.batteryCapacity = batteryCapacity;
                this.maxFlightTime = maxFlightTime;
                this.payloadCapacity = payloadCapacity;
                this.role = role;
			}
            public void addEnergyModel(EnergyModel energyModel){
            	this.energyModels.add(energyModel);
            }
        '''
        fsa.generateFile(fileName, content)
    }
    def void generateEnergyModel(EnergyModel energyModel,IFileSystemAccess2 fsa){
    	val fileName = setFileName(energyModel.name);
    	val content = '''
    		public class «energyModel.name» {
    			private float consumptionRate = "«energyModel.consumptionRate»f"
    			private float batteryHealth = "«energyModel.batteryHealth»f"
    			private float rechargeTime = "«energyModel.rechargeTime»f"
    			public «energyModel.name» (float consumptionRate, float batteryHealth, float rechargeTime){
    				this.consumptionRate = consumptionRate;
    				this.batteryHealth = batteryHealth;
    				this.rechargeTime = rechargeTime;
    			}
    		}
    	'''
    	fsa.generateFile(fileName, content)
    }
    def void generatePhase(Phase phase, IFileSystemAccess2 fsa){
    	val fileName = setFileName(phase.name);
    	val content = '''
    		public class «phase.name» {
    			private String phaseType = "«phase.phaseType»"
    			private float energyUsage = "«phase.energyUsage»f"
    			private List<SubPhase> subPhases = new ArrayList<>();
    			public «phase.name» (String phaseType, float energyUsage){
    				this.phaseType = phaseType;
    				this.energyUsage = energyUsage;
    			}
    			public void addSubPhase(SubPhase subPhase){
    				this.subPhases.add(subPhase);
    			} 
    		}
    	'''
    	fsa.generateFile(fileName, content)
    }
    def void generateSubPhase(SubPhase subPhase, IFileSystemAccess2 fsa){
    	val fileName = setFileName(subPhase.name);
    	val content = '''
    		public class «subPhase.name» {
    			private String subPhaseType = "«subPhase.subPhaseType»"
    			private float duration = "«subPhase.duration»f"
    			private List<Action> actions =  new ArrayList<>();
    			public «subPhase.name» (String subPhaseType, float duration){
    				this.subPhaseType = subPhaseType;
    				this.duration = duration;
    			}
    			public void addAction(Action action){
    				this.actions.add(action);
    			}
    		}
    	'''
    	fsa.generateFile(fileName, content)
    }
    def void generateAction(Action action, IFileSystemAccess2 fsa){
    	val fileName = setFileName(action.name);
    	val content = '''
    		public class «action.name» {
    			private String actionType = "«action.actionType»"
    			private String inputOutput = "«action.inputOutput»"
    			private float energyUsage = "«action.energyUsage»f"
    			public «action.name» (String actionType, String inputOutput, float energyUsage){
    				this.actionType = actionType;
    				this.inputOutput = inputOutput;
    				this.energyUsage = energyUsage;
    			}
    		}
    	'''
    	fsa.generateFile(fileName, content)
    }
    def void generateConstraint(Constraint constraint, IFileSystemAccess2 fsa) {
        if (constraint instanceof SafetyConstraint) {
            generateSafetyConstraint(constraint as SafetyConstraint, fsa)
        } else if (constraint instanceof RegulatoryConstraint) {
            generateRegulatoryConstraint(constraint as RegulatoryConstraint, fsa)
        }
    }

    def void generateSafetyConstraint(SafetyConstraint safetyConstraint, IFileSystemAccess2 fsa) {
        val fileName = setFileName(safetyConstraint.name)
        val content = '''
            public class «safetyConstraint.name» extends Constraint {
                private float minBattery = «safetyConstraint.minBattery»f;
                private float maxWindSpeed = «safetyConstraint.maxWindSpeed»f;

                public «safetyConstraint.name»(float minBattery, float maxWindSpeed) {
                    this.minBattery = minBattery;
                    this.maxWindSpeed = maxWindSpeed;
                }
            }
        '''
        fsa.generateFile(fileName, content)
    }

    def void generateRegulatoryConstraint(RegulatoryConstraint regulatoryConstraint, IFileSystemAccess2 fsa) {
        val fileName = setFileName(regulatoryConstraint.name)
        val content = '''
            public class «regulatoryConstraint.name» extends Constraint {
                private boolean flightPermission = «regulatoryConstraint.flightPermission»;
                private int altitudeLimit = «regulatoryConstraint.altitudeLimit»;

                public «regulatoryConstraint.name»(boolean flightPermission, int altitudeLimit) {
                    this.flightPermission = flightPermission;
                    this.altitudeLimit = altitudeLimit;
                }
            }
        '''
        fsa.generateFile(fileName, content)
    }
    def void generateMissionEvent(MissionEvent missionEvent, IFileSystemAccess2 fsa){
    	val fileName = setFileName(missionEvent.name);
    	val content = '''
    		public class «missionEvent.name» {
    			private String eventType = "«missionEvent.eventType»"
    			private int impactLevel = "«missionEvent.impactLevel»"
    			private String responseAction = "«missionEvent.responseAction»"
    			public «missionEvent.name» (String eventType, int impactLevel, String responseAction){
    				this.eventType = eventType;
    				this.impactLevel = impactLevel;
    				this.responseAction = responseAction;
    			}
    		}
    	'''
    	fsa.generateFile(fileName, content)
    }
    def String setFileName(String fileName){
    	return 'src-gen/' + fileName + '.java'
    }
}
