/**
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SubPhase;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sub Phase</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubPhaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubPhaseImpl#getSubPhaseType <em>Sub Phase Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubPhaseImpl#getDuration <em>Duration</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SubPhaseImpl#getAddAction <em>Add Action</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubPhaseImpl extends MinimalEObjectImpl.Container implements SubPhase
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSubPhaseType() <em>Sub Phase Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubPhaseType()
   * @generated
   * @ordered
   */
  protected static final String SUB_PHASE_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSubPhaseType() <em>Sub Phase Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubPhaseType()
   * @generated
   * @ordered
   */
  protected String subPhaseType = SUB_PHASE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected static final String DURATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected String duration = DURATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getAddAction() <em>Add Action</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAddAction()
   * @generated
   * @ordered
   */
  protected EList<Action> addAction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubPhaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SUB_PHASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUB_PHASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSubPhaseType()
  {
    return subPhaseType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubPhaseType(String newSubPhaseType)
  {
    String oldSubPhaseType = subPhaseType;
    subPhaseType = newSubPhaseType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUB_PHASE__SUB_PHASE_TYPE, oldSubPhaseType, subPhaseType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDuration()
  {
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDuration(String newDuration)
  {
    String oldDuration = duration;
    duration = newDuration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SUB_PHASE__DURATION, oldDuration, duration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Action> getAddAction()
  {
    if (addAction == null)
    {
      addAction = new EObjectResolvingEList<Action>(Action.class, this, MyDslPackage.SUB_PHASE__ADD_ACTION);
    }
    return addAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_PHASE__NAME:
        return getName();
      case MyDslPackage.SUB_PHASE__SUB_PHASE_TYPE:
        return getSubPhaseType();
      case MyDslPackage.SUB_PHASE__DURATION:
        return getDuration();
      case MyDslPackage.SUB_PHASE__ADD_ACTION:
        return getAddAction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_PHASE__NAME:
        setName((String)newValue);
        return;
      case MyDslPackage.SUB_PHASE__SUB_PHASE_TYPE:
        setSubPhaseType((String)newValue);
        return;
      case MyDslPackage.SUB_PHASE__DURATION:
        setDuration((String)newValue);
        return;
      case MyDslPackage.SUB_PHASE__ADD_ACTION:
        getAddAction().clear();
        getAddAction().addAll((Collection<? extends Action>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_PHASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyDslPackage.SUB_PHASE__SUB_PHASE_TYPE:
        setSubPhaseType(SUB_PHASE_TYPE_EDEFAULT);
        return;
      case MyDslPackage.SUB_PHASE__DURATION:
        setDuration(DURATION_EDEFAULT);
        return;
      case MyDslPackage.SUB_PHASE__ADD_ACTION:
        getAddAction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SUB_PHASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyDslPackage.SUB_PHASE__SUB_PHASE_TYPE:
        return SUB_PHASE_TYPE_EDEFAULT == null ? subPhaseType != null : !SUB_PHASE_TYPE_EDEFAULT.equals(subPhaseType);
      case MyDslPackage.SUB_PHASE__DURATION:
        return DURATION_EDEFAULT == null ? duration != null : !DURATION_EDEFAULT.equals(duration);
      case MyDslPackage.SUB_PHASE__ADD_ACTION:
        return addAction != null && !addAction.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", subPhaseType: ");
    result.append(subPhaseType);
    result.append(", duration: ");
    result.append(duration);
    result.append(')');
    return result.toString();
  }

} //SubPhaseImpl
